Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> program
Rule 2     program -> blok
Rule 3     blok -> blok_deklaracji end blok_instrukcji end
Rule 4     blok -> end blok_instrukcji end
Rule 5     blok -> blok_deklaracji end end
Rule 6     blok -> end end
Rule 7     blok_deklaracji -> dek_funs
Rule 8     dek_funs -> <empty>
Rule 9     dek_funs -> dek_fun
Rule 10    dek_funs -> dek_fun dek_funs
Rule 11    dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end
Rule 12    dek_fun -> function void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end
Rule 13    arguments -> <empty>
Rule 14    arguments -> var_sym identifier
Rule 15    arguments -> var_sym identifier arguments
Rule 16    blok_instrukcji -> instrukcjas
Rule 17    instrukcjas -> <empty>
Rule 18    instrukcjas -> instrukcja
Rule 19    instrukcjas -> instrukcja instrukcjas
Rule 20    instrukcja -> instr_inicjuj end
Rule 21    instrukcja -> instr_podstaw end
Rule 22    instrukcja -> instr_wywolaj end
Rule 23    instrukcja -> instr_if end
Rule 24    instrukcja -> instr_while end
Rule 25    instrukcja -> instr_for end
Rule 26    instrukcja -> wypisz end
Rule 27    instrukcja -> instr_switch end
Rule 28    instr_inicjuj -> var_liczba_sym identifier assign liczba
Rule 29    instr_inicjuj -> var_liczba_sym identifier assign null
Rule 30    instr_inicjuj -> string identifier assign text
Rule 31    instr_inicjuj -> string identifier assign null
Rule 32    instr_podstaw -> identifier assign wyrazenie
Rule 33    instr_podstaw -> identifier assign null
Rule 34    instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis
Rule 35    wyrazenies -> <empty>
Rule 36    wyrazenies -> wyrazenie
Rule 37    wyrazenies -> wyrazenie wyrazenies
Rule 38    instr_if -> if warunek then instrukcja instrukcjas
Rule 39    instr_if -> if warunek then instrukcja instrukcjas else instrukcja instrukcjas
Rule 40    instr_while -> while warunek do instrukcjas
Rule 41    instr_for -> for for_warunek do instrukcjas
Rule 42    wypisz -> print wyrazenie
Rule 43    wypisz -> print text
Rule 44    instr_switch -> switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
Rule 45    case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas end
Rule 46    case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas break end
Rule 47    case_default -> default then instrukcjas end
Rule 48    case_bloks -> <empty>
Rule 49    case_bloks -> case_blok
Rule 50    case_bloks -> case_blok case_bloks
Rule 51    var_sym -> var_liczba_sym
Rule 52    var_sym -> string
Rule 53    var_sym -> boolean
Rule 54    var_sym -> char
Rule 55    var_liczba_sym -> int
Rule 56    var_liczba_sym -> long
Rule 57    var_liczba_sym -> float
Rule 58    var_liczba_sym -> double
Rule 59    wyrazenie -> skladnik skladniks
Rule 60    wyrazenie -> true
Rule 61    wyrazenie -> false
Rule 62    skladnik -> czynnik czynniks
Rule 63    skladniks -> <empty>
Rule 64    skladniks -> oper_add skladnik
Rule 65    skladniks -> oper_add skladnik skladniks
Rule 66    oper_add -> plus
Rule 67    oper_add -> minus
Rule 68    oper_mul -> times
Rule 69    oper_mul -> divide
Rule 70    czynnik -> identifier
Rule 71    czynnik -> liczba
Rule 72    czynnik -> instr_wywolaj
Rule 73    czynnik -> wyr_w_naw
Rule 74    czynniks -> <empty>
Rule 75    czynniks -> oper_mul czynnik
Rule 76    czynniks -> oper_mul czynnik czynniks
Rule 77    liczba -> number_unsigned
Rule 78    liczba -> minus number_unsigned
Rule 79    wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis
Rule 80    warunek -> warunek_prosty warunek_prostys
Rule 81    warunek -> not warunek_prosty warunek_prostys
Rule 82    warunek_prosty -> wyrazenie oper_porownania wyrazenie
Rule 83    warunek_prostys -> <empty>
Rule 84    warunek_prostys -> oper_war warunek_prosty
Rule 85    warunek_prostys -> oper_war warunek_prosty warunek_prostys
Rule 86    oper_war -> and
Rule 87    oper_war -> or
Rule 88    oper_porownania -> equals
Rule 89    oper_porownania -> not_equals
Rule 90    oper_porownania -> greater
Rule 91    oper_porownania -> lower
Rule 92    oper_porownania -> greater_or_equal
Rule 93    oper_porownania -> lower_or_equal
Rule 94    not_equals -> not equals
Rule 95    for_warunek -> instr_inicjuj wyrazenie instr_podstaw

Terminals, with rules where they appear

and                  : 86
assign               : 28 29 30 31 32 33
boolean              : 53
break                : 46
call                 : 34
case                 : 45 46
char                 : 54
default              : 47
divide               : 69
do                   : 40 41
double               : 58
else                 : 39
end                  : 3 3 4 4 5 5 6 6 11 12 20 21 22 23 24 25 26 27 45 46 47
equals               : 88 94
error                : 
false                : 61
float                : 57
for                  : 41
function             : 11 12
greater              : 90
greater_or_equal     : 92
identifier           : 11 12 14 15 28 29 30 31 32 33 34 70
if                   : 38 39
int                  : 55
l_parenthesis        : 11 12 34 44 45 46 79
long                 : 56
lower                : 91
lower_or_equal       : 93
minus                : 67 78
not                  : 81 94
null                 : 29 31 33
number_unsigned      : 77 78
or                   : 87
plus                 : 66
print                : 42 43
r_parenthesis        : 11 12 34 44 45 46 79
return               : 11 12
string               : 30 31 52
switch               : 44
text                 : 30 43
then                 : 38 39 45 46 47
times                : 68
true                 : 60
void                 : 12
while                : 40

Nonterminals, with rules where they appear

arguments            : 11 12 15
blok                 : 2
blok_deklaracji      : 3 5
blok_instrukcji      : 3 4
case_blok            : 44 49 50
case_bloks           : 44 50
case_default         : 44
czynnik              : 62 75 76
czynniks             : 62 76
dek_fun              : 9 10
dek_funs             : 7 10
for_warunek          : 41
instr_for            : 25
instr_if             : 23
instr_inicjuj        : 20 95
instr_podstaw        : 21 95
instr_switch         : 27
instr_while          : 24
instr_wywolaj        : 22 72
instrukcja           : 18 19 38 39 39
instrukcjas          : 11 12 16 19 38 39 39 40 41 45 46 47
liczba               : 28 71
not_equals           : 89
oper_add             : 64 65
oper_mul             : 75 76
oper_porownania      : 82
oper_war             : 84 85
program              : 1
skladnik             : 59 64 65
skladniks            : 59 65
start                : 0
var_liczba_sym       : 28 29 51
var_sym              : 11 14 15
warunek              : 38 39 40
warunek_prosty       : 80 81 84 85
warunek_prostys      : 80 81 85
wypisz               : 26
wyr_w_naw            : 73
wyrazenie            : 11 12 32 36 37 42 44 45 46 79 82 82 95
wyrazenies           : 34 37

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . program
    (2) program -> . blok
    (3) blok -> . blok_deklaracji end blok_instrukcji end
    (4) blok -> . end blok_instrukcji end
    (5) blok -> . blok_deklaracji end end
    (6) blok -> . end end
    (7) blok_deklaracji -> . dek_funs
    (8) dek_funs -> .
    (9) dek_funs -> . dek_fun
    (10) dek_funs -> . dek_fun dek_funs
    (11) dek_fun -> . function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end
    (12) dek_fun -> . function void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end

  ! shift/reduce conflict for end resolved as shift
    end             shift and go to state 5
    function        shift and go to state 8

  ! end             [ reduce using rule 8 (dek_funs -> .) ]

    start                          shift and go to state 1
    program                        shift and go to state 2
    blok                           shift and go to state 3
    blok_deklaracji                shift and go to state 4
    dek_funs                       shift and go to state 6
    dek_fun                        shift and go to state 7

state 1

    (0) S' -> start .



state 2

    (1) start -> program .

    $end            reduce using rule 1 (start -> program .)


state 3

    (2) program -> blok .

    $end            reduce using rule 2 (program -> blok .)


state 4

    (3) blok -> blok_deklaracji . end blok_instrukcji end
    (5) blok -> blok_deklaracji . end end

    end             shift and go to state 9


state 5

    (4) blok -> end . blok_instrukcji end
    (6) blok -> end . end
    (16) blok_instrukcji -> . instrukcjas
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

  ! shift/reduce conflict for end resolved as shift
    end             shift and go to state 10
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

  ! end             [ reduce using rule 17 (instrukcjas -> .) ]

    blok_instrukcji                shift and go to state 11
    instrukcjas                    shift and go to state 12
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 6

    (7) blok_deklaracji -> dek_funs .

    end             reduce using rule 7 (blok_deklaracji -> dek_funs .)


state 7

    (9) dek_funs -> dek_fun .
    (10) dek_funs -> dek_fun . dek_funs
    (8) dek_funs -> .
    (9) dek_funs -> . dek_fun
    (10) dek_funs -> . dek_fun dek_funs
    (11) dek_fun -> . function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end
    (12) dek_fun -> . function void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end

  ! reduce/reduce conflict for end resolved using rule 8 (dek_funs -> .)
    end             reduce using rule 8 (dek_funs -> .)
    function        shift and go to state 8

  ! end             [ reduce using rule 9 (dek_funs -> dek_fun .) ]

    dek_fun                        shift and go to state 7
    dek_funs                       shift and go to state 35

state 8

    (11) dek_fun -> function . var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end
    (12) dek_fun -> function . void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end
    (51) var_sym -> . var_liczba_sym
    (52) var_sym -> . string
    (53) var_sym -> . boolean
    (54) var_sym -> . char
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    void            shift and go to state 37
    string          shift and go to state 39
    boolean         shift and go to state 40
    char            shift and go to state 41
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    var_sym                        shift and go to state 36
    var_liczba_sym                 shift and go to state 38

state 9

    (3) blok -> blok_deklaracji end . blok_instrukcji end
    (5) blok -> blok_deklaracji end . end
    (16) blok_instrukcji -> . instrukcjas
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

  ! shift/reduce conflict for end resolved as shift
    end             shift and go to state 42
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

  ! end             [ reduce using rule 17 (instrukcjas -> .) ]

    blok_instrukcji                shift and go to state 43
    instrukcjas                    shift and go to state 12
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 10

    (6) blok -> end end .

    $end            reduce using rule 6 (blok -> end end .)


state 11

    (4) blok -> end blok_instrukcji . end

    end             shift and go to state 44


state 12

    (16) blok_instrukcji -> instrukcjas .

    end             reduce using rule 16 (blok_instrukcji -> instrukcjas .)


state 13

    (18) instrukcjas -> instrukcja .
    (19) instrukcjas -> instrukcja . instrukcjas
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

  ! reduce/reduce conflict for end resolved using rule 17 (instrukcjas -> .)
  ! reduce/reduce conflict for else resolved using rule 17 (instrukcjas -> .)
  ! reduce/reduce conflict for return resolved using rule 17 (instrukcjas -> .)
  ! reduce/reduce conflict for break resolved using rule 17 (instrukcjas -> .)
    end             reduce using rule 17 (instrukcjas -> .)
    else            reduce using rule 17 (instrukcjas -> .)
    return          reduce using rule 17 (instrukcjas -> .)
    break           reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

  ! end             [ reduce using rule 18 (instrukcjas -> instrukcja .) ]
  ! else            [ reduce using rule 18 (instrukcjas -> instrukcja .) ]
  ! return          [ reduce using rule 18 (instrukcjas -> instrukcja .) ]
  ! break           [ reduce using rule 18 (instrukcjas -> instrukcja .) ]

    instrukcja                     shift and go to state 13
    instrukcjas                    shift and go to state 45
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 14

    (20) instrukcja -> instr_inicjuj . end

    end             shift and go to state 46


state 15

    (21) instrukcja -> instr_podstaw . end

    end             shift and go to state 47


state 16

    (22) instrukcja -> instr_wywolaj . end

    end             shift and go to state 48


state 17

    (23) instrukcja -> instr_if . end

    end             shift and go to state 49


state 18

    (24) instrukcja -> instr_while . end

    end             shift and go to state 50


state 19

    (25) instrukcja -> instr_for . end

    end             shift and go to state 51


state 20

    (26) instrukcja -> wypisz . end

    end             shift and go to state 52


state 21

    (27) instrukcja -> instr_switch . end

    end             shift and go to state 53


state 22

    (28) instr_inicjuj -> var_liczba_sym . identifier assign liczba
    (29) instr_inicjuj -> var_liczba_sym . identifier assign null

    identifier      shift and go to state 54


state 23

    (32) instr_podstaw -> identifier . assign wyrazenie
    (33) instr_podstaw -> identifier . assign null

    assign          shift and go to state 55


state 24

    (30) instr_inicjuj -> string . identifier assign text
    (31) instr_inicjuj -> string . identifier assign null

    identifier      shift and go to state 56


state 25

    (34) instr_wywolaj -> call . identifier l_parenthesis wyrazenies r_parenthesis

    identifier      shift and go to state 57


state 26

    (38) instr_if -> if . warunek then instrukcja instrukcjas
    (39) instr_if -> if . warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (80) warunek -> . warunek_prosty warunek_prostys
    (81) warunek -> . not warunek_prosty warunek_prostys
    (82) warunek_prosty -> . wyrazenie oper_porownania wyrazenie
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    not             shift and go to state 60
    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    warunek                        shift and go to state 58
    warunek_prosty                 shift and go to state 59
    wyrazenie                      shift and go to state 61
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 27

    (40) instr_while -> while . warunek do instrukcjas
    (80) warunek -> . warunek_prosty warunek_prostys
    (81) warunek -> . not warunek_prosty warunek_prostys
    (82) warunek_prosty -> . wyrazenie oper_porownania wyrazenie
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    not             shift and go to state 60
    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    warunek                        shift and go to state 73
    warunek_prosty                 shift and go to state 59
    wyrazenie                      shift and go to state 61
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 28

    (41) instr_for -> for . for_warunek do instrukcjas
    (95) for_warunek -> . instr_inicjuj wyrazenie instr_podstaw
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    string          shift and go to state 24
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    for_warunek                    shift and go to state 74
    instr_inicjuj                  shift and go to state 75
    var_liczba_sym                 shift and go to state 22

state 29

    (42) wypisz -> print . wyrazenie
    (43) wypisz -> print . text
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    text            shift and go to state 77
    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 76
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 30

    (44) instr_switch -> switch . l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default

    l_parenthesis   shift and go to state 78


state 31

    (55) var_liczba_sym -> int .

    identifier      reduce using rule 55 (var_liczba_sym -> int .)


state 32

    (56) var_liczba_sym -> long .

    identifier      reduce using rule 56 (var_liczba_sym -> long .)


state 33

    (57) var_liczba_sym -> float .

    identifier      reduce using rule 57 (var_liczba_sym -> float .)


state 34

    (58) var_liczba_sym -> double .

    identifier      reduce using rule 58 (var_liczba_sym -> double .)


state 35

    (10) dek_funs -> dek_fun dek_funs .

    end             reduce using rule 10 (dek_funs -> dek_fun dek_funs .)


state 36

    (11) dek_fun -> function var_sym . identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end

    identifier      shift and go to state 79


state 37

    (12) dek_fun -> function void . identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end

    identifier      shift and go to state 80


state 38

    (51) var_sym -> var_liczba_sym .

    identifier      reduce using rule 51 (var_sym -> var_liczba_sym .)


state 39

    (52) var_sym -> string .

    identifier      reduce using rule 52 (var_sym -> string .)


state 40

    (53) var_sym -> boolean .

    identifier      reduce using rule 53 (var_sym -> boolean .)


state 41

    (54) var_sym -> char .

    identifier      reduce using rule 54 (var_sym -> char .)


state 42

    (5) blok -> blok_deklaracji end end .

    $end            reduce using rule 5 (blok -> blok_deklaracji end end .)


state 43

    (3) blok -> blok_deklaracji end blok_instrukcji . end

    end             shift and go to state 81


state 44

    (4) blok -> end blok_instrukcji end .

    $end            reduce using rule 4 (blok -> end blok_instrukcji end .)


state 45

    (19) instrukcjas -> instrukcja instrukcjas .

    end             reduce using rule 19 (instrukcjas -> instrukcja instrukcjas .)
    else            reduce using rule 19 (instrukcjas -> instrukcja instrukcjas .)
    return          reduce using rule 19 (instrukcjas -> instrukcja instrukcjas .)
    break           reduce using rule 19 (instrukcjas -> instrukcja instrukcjas .)


state 46

    (20) instrukcja -> instr_inicjuj end .

    string          reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    identifier      reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    call            reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    if              reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    while           reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    for             reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    print           reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    switch          reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    int             reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    long            reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    float           reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    double          reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    end             reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    else            reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    return          reduce using rule 20 (instrukcja -> instr_inicjuj end .)
    break           reduce using rule 20 (instrukcja -> instr_inicjuj end .)


state 47

    (21) instrukcja -> instr_podstaw end .

    string          reduce using rule 21 (instrukcja -> instr_podstaw end .)
    identifier      reduce using rule 21 (instrukcja -> instr_podstaw end .)
    call            reduce using rule 21 (instrukcja -> instr_podstaw end .)
    if              reduce using rule 21 (instrukcja -> instr_podstaw end .)
    while           reduce using rule 21 (instrukcja -> instr_podstaw end .)
    for             reduce using rule 21 (instrukcja -> instr_podstaw end .)
    print           reduce using rule 21 (instrukcja -> instr_podstaw end .)
    switch          reduce using rule 21 (instrukcja -> instr_podstaw end .)
    int             reduce using rule 21 (instrukcja -> instr_podstaw end .)
    long            reduce using rule 21 (instrukcja -> instr_podstaw end .)
    float           reduce using rule 21 (instrukcja -> instr_podstaw end .)
    double          reduce using rule 21 (instrukcja -> instr_podstaw end .)
    end             reduce using rule 21 (instrukcja -> instr_podstaw end .)
    else            reduce using rule 21 (instrukcja -> instr_podstaw end .)
    return          reduce using rule 21 (instrukcja -> instr_podstaw end .)
    break           reduce using rule 21 (instrukcja -> instr_podstaw end .)


state 48

    (22) instrukcja -> instr_wywolaj end .

    string          reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    identifier      reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    call            reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    if              reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    while           reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    for             reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    print           reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    switch          reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    int             reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    long            reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    float           reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    double          reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    end             reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    else            reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    return          reduce using rule 22 (instrukcja -> instr_wywolaj end .)
    break           reduce using rule 22 (instrukcja -> instr_wywolaj end .)


state 49

    (23) instrukcja -> instr_if end .

    string          reduce using rule 23 (instrukcja -> instr_if end .)
    identifier      reduce using rule 23 (instrukcja -> instr_if end .)
    call            reduce using rule 23 (instrukcja -> instr_if end .)
    if              reduce using rule 23 (instrukcja -> instr_if end .)
    while           reduce using rule 23 (instrukcja -> instr_if end .)
    for             reduce using rule 23 (instrukcja -> instr_if end .)
    print           reduce using rule 23 (instrukcja -> instr_if end .)
    switch          reduce using rule 23 (instrukcja -> instr_if end .)
    int             reduce using rule 23 (instrukcja -> instr_if end .)
    long            reduce using rule 23 (instrukcja -> instr_if end .)
    float           reduce using rule 23 (instrukcja -> instr_if end .)
    double          reduce using rule 23 (instrukcja -> instr_if end .)
    end             reduce using rule 23 (instrukcja -> instr_if end .)
    else            reduce using rule 23 (instrukcja -> instr_if end .)
    return          reduce using rule 23 (instrukcja -> instr_if end .)
    break           reduce using rule 23 (instrukcja -> instr_if end .)


state 50

    (24) instrukcja -> instr_while end .

    string          reduce using rule 24 (instrukcja -> instr_while end .)
    identifier      reduce using rule 24 (instrukcja -> instr_while end .)
    call            reduce using rule 24 (instrukcja -> instr_while end .)
    if              reduce using rule 24 (instrukcja -> instr_while end .)
    while           reduce using rule 24 (instrukcja -> instr_while end .)
    for             reduce using rule 24 (instrukcja -> instr_while end .)
    print           reduce using rule 24 (instrukcja -> instr_while end .)
    switch          reduce using rule 24 (instrukcja -> instr_while end .)
    int             reduce using rule 24 (instrukcja -> instr_while end .)
    long            reduce using rule 24 (instrukcja -> instr_while end .)
    float           reduce using rule 24 (instrukcja -> instr_while end .)
    double          reduce using rule 24 (instrukcja -> instr_while end .)
    end             reduce using rule 24 (instrukcja -> instr_while end .)
    else            reduce using rule 24 (instrukcja -> instr_while end .)
    return          reduce using rule 24 (instrukcja -> instr_while end .)
    break           reduce using rule 24 (instrukcja -> instr_while end .)


state 51

    (25) instrukcja -> instr_for end .

    string          reduce using rule 25 (instrukcja -> instr_for end .)
    identifier      reduce using rule 25 (instrukcja -> instr_for end .)
    call            reduce using rule 25 (instrukcja -> instr_for end .)
    if              reduce using rule 25 (instrukcja -> instr_for end .)
    while           reduce using rule 25 (instrukcja -> instr_for end .)
    for             reduce using rule 25 (instrukcja -> instr_for end .)
    print           reduce using rule 25 (instrukcja -> instr_for end .)
    switch          reduce using rule 25 (instrukcja -> instr_for end .)
    int             reduce using rule 25 (instrukcja -> instr_for end .)
    long            reduce using rule 25 (instrukcja -> instr_for end .)
    float           reduce using rule 25 (instrukcja -> instr_for end .)
    double          reduce using rule 25 (instrukcja -> instr_for end .)
    end             reduce using rule 25 (instrukcja -> instr_for end .)
    else            reduce using rule 25 (instrukcja -> instr_for end .)
    return          reduce using rule 25 (instrukcja -> instr_for end .)
    break           reduce using rule 25 (instrukcja -> instr_for end .)


state 52

    (26) instrukcja -> wypisz end .

    string          reduce using rule 26 (instrukcja -> wypisz end .)
    identifier      reduce using rule 26 (instrukcja -> wypisz end .)
    call            reduce using rule 26 (instrukcja -> wypisz end .)
    if              reduce using rule 26 (instrukcja -> wypisz end .)
    while           reduce using rule 26 (instrukcja -> wypisz end .)
    for             reduce using rule 26 (instrukcja -> wypisz end .)
    print           reduce using rule 26 (instrukcja -> wypisz end .)
    switch          reduce using rule 26 (instrukcja -> wypisz end .)
    int             reduce using rule 26 (instrukcja -> wypisz end .)
    long            reduce using rule 26 (instrukcja -> wypisz end .)
    float           reduce using rule 26 (instrukcja -> wypisz end .)
    double          reduce using rule 26 (instrukcja -> wypisz end .)
    end             reduce using rule 26 (instrukcja -> wypisz end .)
    else            reduce using rule 26 (instrukcja -> wypisz end .)
    return          reduce using rule 26 (instrukcja -> wypisz end .)
    break           reduce using rule 26 (instrukcja -> wypisz end .)


state 53

    (27) instrukcja -> instr_switch end .

    string          reduce using rule 27 (instrukcja -> instr_switch end .)
    identifier      reduce using rule 27 (instrukcja -> instr_switch end .)
    call            reduce using rule 27 (instrukcja -> instr_switch end .)
    if              reduce using rule 27 (instrukcja -> instr_switch end .)
    while           reduce using rule 27 (instrukcja -> instr_switch end .)
    for             reduce using rule 27 (instrukcja -> instr_switch end .)
    print           reduce using rule 27 (instrukcja -> instr_switch end .)
    switch          reduce using rule 27 (instrukcja -> instr_switch end .)
    int             reduce using rule 27 (instrukcja -> instr_switch end .)
    long            reduce using rule 27 (instrukcja -> instr_switch end .)
    float           reduce using rule 27 (instrukcja -> instr_switch end .)
    double          reduce using rule 27 (instrukcja -> instr_switch end .)
    end             reduce using rule 27 (instrukcja -> instr_switch end .)
    else            reduce using rule 27 (instrukcja -> instr_switch end .)
    return          reduce using rule 27 (instrukcja -> instr_switch end .)
    break           reduce using rule 27 (instrukcja -> instr_switch end .)


state 54

    (28) instr_inicjuj -> var_liczba_sym identifier . assign liczba
    (29) instr_inicjuj -> var_liczba_sym identifier . assign null

    assign          shift and go to state 82


state 55

    (32) instr_podstaw -> identifier assign . wyrazenie
    (33) instr_podstaw -> identifier assign . null
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    null            shift and go to state 84
    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 83
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 56

    (30) instr_inicjuj -> string identifier . assign text
    (31) instr_inicjuj -> string identifier . assign null

    assign          shift and go to state 85


state 57

    (34) instr_wywolaj -> call identifier . l_parenthesis wyrazenies r_parenthesis

    l_parenthesis   shift and go to state 86


state 58

    (38) instr_if -> if warunek . then instrukcja instrukcjas
    (39) instr_if -> if warunek . then instrukcja instrukcjas else instrukcja instrukcjas

    then            shift and go to state 87


state 59

    (80) warunek -> warunek_prosty . warunek_prostys
    (83) warunek_prostys -> .
    (84) warunek_prostys -> . oper_war warunek_prosty
    (85) warunek_prostys -> . oper_war warunek_prosty warunek_prostys
    (86) oper_war -> . and
    (87) oper_war -> . or

    then            reduce using rule 83 (warunek_prostys -> .)
    do              reduce using rule 83 (warunek_prostys -> .)
    and             shift and go to state 90
    or              shift and go to state 91

    warunek_prostys                shift and go to state 88
    oper_war                       shift and go to state 89

state 60

    (81) warunek -> not . warunek_prosty warunek_prostys
    (82) warunek_prosty -> . wyrazenie oper_porownania wyrazenie
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    warunek_prosty                 shift and go to state 92
    wyrazenie                      shift and go to state 61
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 61

    (82) warunek_prosty -> wyrazenie . oper_porownania wyrazenie
    (88) oper_porownania -> . equals
    (89) oper_porownania -> . not_equals
    (90) oper_porownania -> . greater
    (91) oper_porownania -> . lower
    (92) oper_porownania -> . greater_or_equal
    (93) oper_porownania -> . lower_or_equal
    (94) not_equals -> . not equals

    equals          shift and go to state 94
    greater         shift and go to state 96
    lower           shift and go to state 97
    greater_or_equal shift and go to state 98
    lower_or_equal  shift and go to state 99
    not             shift and go to state 100

    oper_porownania                shift and go to state 93
    not_equals                     shift and go to state 95

state 62

    (59) wyrazenie -> skladnik . skladniks
    (63) skladniks -> .
    (64) skladniks -> . oper_add skladnik
    (65) skladniks -> . oper_add skladnik skladniks
    (66) oper_add -> . plus
    (67) oper_add -> . minus

  ! shift/reduce conflict for minus resolved as shift
    equals          reduce using rule 63 (skladniks -> .)
    greater         reduce using rule 63 (skladniks -> .)
    lower           reduce using rule 63 (skladniks -> .)
    greater_or_equal reduce using rule 63 (skladniks -> .)
    lower_or_equal  reduce using rule 63 (skladniks -> .)
    not             reduce using rule 63 (skladniks -> .)
    end             reduce using rule 63 (skladniks -> .)
    do              reduce using rule 63 (skladniks -> .)
    r_parenthesis   reduce using rule 63 (skladniks -> .)
    identifier      reduce using rule 63 (skladniks -> .)
    true            reduce using rule 63 (skladniks -> .)
    false           reduce using rule 63 (skladniks -> .)
    number_unsigned reduce using rule 63 (skladniks -> .)
    call            reduce using rule 63 (skladniks -> .)
    l_parenthesis   reduce using rule 63 (skladniks -> .)
    and             reduce using rule 63 (skladniks -> .)
    or              reduce using rule 63 (skladniks -> .)
    then            reduce using rule 63 (skladniks -> .)
    plus            shift and go to state 103
    minus           shift and go to state 104

  ! minus           [ reduce using rule 63 (skladniks -> .) ]

    skladniks                      shift and go to state 101
    oper_add                       shift and go to state 102

state 63

    (60) wyrazenie -> true .

    equals          reduce using rule 60 (wyrazenie -> true .)
    greater         reduce using rule 60 (wyrazenie -> true .)
    lower           reduce using rule 60 (wyrazenie -> true .)
    greater_or_equal reduce using rule 60 (wyrazenie -> true .)
    lower_or_equal  reduce using rule 60 (wyrazenie -> true .)
    not             reduce using rule 60 (wyrazenie -> true .)
    end             reduce using rule 60 (wyrazenie -> true .)
    do              reduce using rule 60 (wyrazenie -> true .)
    r_parenthesis   reduce using rule 60 (wyrazenie -> true .)
    identifier      reduce using rule 60 (wyrazenie -> true .)
    true            reduce using rule 60 (wyrazenie -> true .)
    false           reduce using rule 60 (wyrazenie -> true .)
    number_unsigned reduce using rule 60 (wyrazenie -> true .)
    minus           reduce using rule 60 (wyrazenie -> true .)
    call            reduce using rule 60 (wyrazenie -> true .)
    l_parenthesis   reduce using rule 60 (wyrazenie -> true .)
    and             reduce using rule 60 (wyrazenie -> true .)
    or              reduce using rule 60 (wyrazenie -> true .)
    then            reduce using rule 60 (wyrazenie -> true .)


state 64

    (61) wyrazenie -> false .

    equals          reduce using rule 61 (wyrazenie -> false .)
    greater         reduce using rule 61 (wyrazenie -> false .)
    lower           reduce using rule 61 (wyrazenie -> false .)
    greater_or_equal reduce using rule 61 (wyrazenie -> false .)
    lower_or_equal  reduce using rule 61 (wyrazenie -> false .)
    not             reduce using rule 61 (wyrazenie -> false .)
    end             reduce using rule 61 (wyrazenie -> false .)
    do              reduce using rule 61 (wyrazenie -> false .)
    r_parenthesis   reduce using rule 61 (wyrazenie -> false .)
    identifier      reduce using rule 61 (wyrazenie -> false .)
    true            reduce using rule 61 (wyrazenie -> false .)
    false           reduce using rule 61 (wyrazenie -> false .)
    number_unsigned reduce using rule 61 (wyrazenie -> false .)
    minus           reduce using rule 61 (wyrazenie -> false .)
    call            reduce using rule 61 (wyrazenie -> false .)
    l_parenthesis   reduce using rule 61 (wyrazenie -> false .)
    and             reduce using rule 61 (wyrazenie -> false .)
    or              reduce using rule 61 (wyrazenie -> false .)
    then            reduce using rule 61 (wyrazenie -> false .)


state 65

    (62) skladnik -> czynnik . czynniks
    (74) czynniks -> .
    (75) czynniks -> . oper_mul czynnik
    (76) czynniks -> . oper_mul czynnik czynniks
    (68) oper_mul -> . times
    (69) oper_mul -> . divide

    plus            reduce using rule 74 (czynniks -> .)
    minus           reduce using rule 74 (czynniks -> .)
    equals          reduce using rule 74 (czynniks -> .)
    greater         reduce using rule 74 (czynniks -> .)
    lower           reduce using rule 74 (czynniks -> .)
    greater_or_equal reduce using rule 74 (czynniks -> .)
    lower_or_equal  reduce using rule 74 (czynniks -> .)
    not             reduce using rule 74 (czynniks -> .)
    end             reduce using rule 74 (czynniks -> .)
    do              reduce using rule 74 (czynniks -> .)
    r_parenthesis   reduce using rule 74 (czynniks -> .)
    identifier      reduce using rule 74 (czynniks -> .)
    true            reduce using rule 74 (czynniks -> .)
    false           reduce using rule 74 (czynniks -> .)
    number_unsigned reduce using rule 74 (czynniks -> .)
    call            reduce using rule 74 (czynniks -> .)
    l_parenthesis   reduce using rule 74 (czynniks -> .)
    and             reduce using rule 74 (czynniks -> .)
    or              reduce using rule 74 (czynniks -> .)
    then            reduce using rule 74 (czynniks -> .)
    times           shift and go to state 107
    divide          shift and go to state 108

    czynniks                       shift and go to state 105
    oper_mul                       shift and go to state 106

state 66

    (70) czynnik -> identifier .

    times           reduce using rule 70 (czynnik -> identifier .)
    divide          reduce using rule 70 (czynnik -> identifier .)
    plus            reduce using rule 70 (czynnik -> identifier .)
    minus           reduce using rule 70 (czynnik -> identifier .)
    equals          reduce using rule 70 (czynnik -> identifier .)
    greater         reduce using rule 70 (czynnik -> identifier .)
    lower           reduce using rule 70 (czynnik -> identifier .)
    greater_or_equal reduce using rule 70 (czynnik -> identifier .)
    lower_or_equal  reduce using rule 70 (czynnik -> identifier .)
    not             reduce using rule 70 (czynnik -> identifier .)
    end             reduce using rule 70 (czynnik -> identifier .)
    do              reduce using rule 70 (czynnik -> identifier .)
    r_parenthesis   reduce using rule 70 (czynnik -> identifier .)
    identifier      reduce using rule 70 (czynnik -> identifier .)
    true            reduce using rule 70 (czynnik -> identifier .)
    false           reduce using rule 70 (czynnik -> identifier .)
    number_unsigned reduce using rule 70 (czynnik -> identifier .)
    call            reduce using rule 70 (czynnik -> identifier .)
    l_parenthesis   reduce using rule 70 (czynnik -> identifier .)
    and             reduce using rule 70 (czynnik -> identifier .)
    or              reduce using rule 70 (czynnik -> identifier .)
    then            reduce using rule 70 (czynnik -> identifier .)


state 67

    (71) czynnik -> liczba .

    times           reduce using rule 71 (czynnik -> liczba .)
    divide          reduce using rule 71 (czynnik -> liczba .)
    plus            reduce using rule 71 (czynnik -> liczba .)
    minus           reduce using rule 71 (czynnik -> liczba .)
    equals          reduce using rule 71 (czynnik -> liczba .)
    greater         reduce using rule 71 (czynnik -> liczba .)
    lower           reduce using rule 71 (czynnik -> liczba .)
    greater_or_equal reduce using rule 71 (czynnik -> liczba .)
    lower_or_equal  reduce using rule 71 (czynnik -> liczba .)
    not             reduce using rule 71 (czynnik -> liczba .)
    end             reduce using rule 71 (czynnik -> liczba .)
    do              reduce using rule 71 (czynnik -> liczba .)
    r_parenthesis   reduce using rule 71 (czynnik -> liczba .)
    identifier      reduce using rule 71 (czynnik -> liczba .)
    true            reduce using rule 71 (czynnik -> liczba .)
    false           reduce using rule 71 (czynnik -> liczba .)
    number_unsigned reduce using rule 71 (czynnik -> liczba .)
    call            reduce using rule 71 (czynnik -> liczba .)
    l_parenthesis   reduce using rule 71 (czynnik -> liczba .)
    and             reduce using rule 71 (czynnik -> liczba .)
    or              reduce using rule 71 (czynnik -> liczba .)
    then            reduce using rule 71 (czynnik -> liczba .)


state 68

    (72) czynnik -> instr_wywolaj .

    times           reduce using rule 72 (czynnik -> instr_wywolaj .)
    divide          reduce using rule 72 (czynnik -> instr_wywolaj .)
    plus            reduce using rule 72 (czynnik -> instr_wywolaj .)
    minus           reduce using rule 72 (czynnik -> instr_wywolaj .)
    equals          reduce using rule 72 (czynnik -> instr_wywolaj .)
    greater         reduce using rule 72 (czynnik -> instr_wywolaj .)
    lower           reduce using rule 72 (czynnik -> instr_wywolaj .)
    greater_or_equal reduce using rule 72 (czynnik -> instr_wywolaj .)
    lower_or_equal  reduce using rule 72 (czynnik -> instr_wywolaj .)
    not             reduce using rule 72 (czynnik -> instr_wywolaj .)
    end             reduce using rule 72 (czynnik -> instr_wywolaj .)
    do              reduce using rule 72 (czynnik -> instr_wywolaj .)
    r_parenthesis   reduce using rule 72 (czynnik -> instr_wywolaj .)
    identifier      reduce using rule 72 (czynnik -> instr_wywolaj .)
    true            reduce using rule 72 (czynnik -> instr_wywolaj .)
    false           reduce using rule 72 (czynnik -> instr_wywolaj .)
    number_unsigned reduce using rule 72 (czynnik -> instr_wywolaj .)
    call            reduce using rule 72 (czynnik -> instr_wywolaj .)
    l_parenthesis   reduce using rule 72 (czynnik -> instr_wywolaj .)
    and             reduce using rule 72 (czynnik -> instr_wywolaj .)
    or              reduce using rule 72 (czynnik -> instr_wywolaj .)
    then            reduce using rule 72 (czynnik -> instr_wywolaj .)


state 69

    (73) czynnik -> wyr_w_naw .

    times           reduce using rule 73 (czynnik -> wyr_w_naw .)
    divide          reduce using rule 73 (czynnik -> wyr_w_naw .)
    plus            reduce using rule 73 (czynnik -> wyr_w_naw .)
    minus           reduce using rule 73 (czynnik -> wyr_w_naw .)
    equals          reduce using rule 73 (czynnik -> wyr_w_naw .)
    greater         reduce using rule 73 (czynnik -> wyr_w_naw .)
    lower           reduce using rule 73 (czynnik -> wyr_w_naw .)
    greater_or_equal reduce using rule 73 (czynnik -> wyr_w_naw .)
    lower_or_equal  reduce using rule 73 (czynnik -> wyr_w_naw .)
    not             reduce using rule 73 (czynnik -> wyr_w_naw .)
    end             reduce using rule 73 (czynnik -> wyr_w_naw .)
    do              reduce using rule 73 (czynnik -> wyr_w_naw .)
    r_parenthesis   reduce using rule 73 (czynnik -> wyr_w_naw .)
    identifier      reduce using rule 73 (czynnik -> wyr_w_naw .)
    true            reduce using rule 73 (czynnik -> wyr_w_naw .)
    false           reduce using rule 73 (czynnik -> wyr_w_naw .)
    number_unsigned reduce using rule 73 (czynnik -> wyr_w_naw .)
    call            reduce using rule 73 (czynnik -> wyr_w_naw .)
    l_parenthesis   reduce using rule 73 (czynnik -> wyr_w_naw .)
    and             reduce using rule 73 (czynnik -> wyr_w_naw .)
    or              reduce using rule 73 (czynnik -> wyr_w_naw .)
    then            reduce using rule 73 (czynnik -> wyr_w_naw .)


state 70

    (77) liczba -> number_unsigned .

    times           reduce using rule 77 (liczba -> number_unsigned .)
    divide          reduce using rule 77 (liczba -> number_unsigned .)
    plus            reduce using rule 77 (liczba -> number_unsigned .)
    minus           reduce using rule 77 (liczba -> number_unsigned .)
    equals          reduce using rule 77 (liczba -> number_unsigned .)
    greater         reduce using rule 77 (liczba -> number_unsigned .)
    lower           reduce using rule 77 (liczba -> number_unsigned .)
    greater_or_equal reduce using rule 77 (liczba -> number_unsigned .)
    lower_or_equal  reduce using rule 77 (liczba -> number_unsigned .)
    not             reduce using rule 77 (liczba -> number_unsigned .)
    end             reduce using rule 77 (liczba -> number_unsigned .)
    do              reduce using rule 77 (liczba -> number_unsigned .)
    r_parenthesis   reduce using rule 77 (liczba -> number_unsigned .)
    identifier      reduce using rule 77 (liczba -> number_unsigned .)
    true            reduce using rule 77 (liczba -> number_unsigned .)
    false           reduce using rule 77 (liczba -> number_unsigned .)
    number_unsigned reduce using rule 77 (liczba -> number_unsigned .)
    call            reduce using rule 77 (liczba -> number_unsigned .)
    l_parenthesis   reduce using rule 77 (liczba -> number_unsigned .)
    and             reduce using rule 77 (liczba -> number_unsigned .)
    or              reduce using rule 77 (liczba -> number_unsigned .)
    then            reduce using rule 77 (liczba -> number_unsigned .)


state 71

    (78) liczba -> minus . number_unsigned

    number_unsigned shift and go to state 109


state 72

    (79) wyr_w_naw -> l_parenthesis . wyrazenie r_parenthesis
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 110
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 73

    (40) instr_while -> while warunek . do instrukcjas

    do              shift and go to state 111


state 74

    (41) instr_for -> for for_warunek . do instrukcjas

    do              shift and go to state 112


state 75

    (95) for_warunek -> instr_inicjuj . wyrazenie instr_podstaw
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 113
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 76

    (42) wypisz -> print wyrazenie .

    end             reduce using rule 42 (wypisz -> print wyrazenie .)


state 77

    (43) wypisz -> print text .

    end             reduce using rule 43 (wypisz -> print text .)


state 78

    (44) instr_switch -> switch l_parenthesis . wyrazenie r_parenthesis case_blok case_bloks case_default
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 114
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 79

    (11) dek_fun -> function var_sym identifier . l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end

    l_parenthesis   shift and go to state 115


state 80

    (12) dek_fun -> function void identifier . l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end

    l_parenthesis   shift and go to state 116


state 81

    (3) blok -> blok_deklaracji end blok_instrukcji end .

    $end            reduce using rule 3 (blok -> blok_deklaracji end blok_instrukcji end .)


state 82

    (28) instr_inicjuj -> var_liczba_sym identifier assign . liczba
    (29) instr_inicjuj -> var_liczba_sym identifier assign . null
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned

    null            shift and go to state 118
    number_unsigned shift and go to state 70
    minus           shift and go to state 71

    liczba                         shift and go to state 117

state 83

    (32) instr_podstaw -> identifier assign wyrazenie .

    end             reduce using rule 32 (instr_podstaw -> identifier assign wyrazenie .)
    do              reduce using rule 32 (instr_podstaw -> identifier assign wyrazenie .)


state 84

    (33) instr_podstaw -> identifier assign null .

    end             reduce using rule 33 (instr_podstaw -> identifier assign null .)
    do              reduce using rule 33 (instr_podstaw -> identifier assign null .)


state 85

    (30) instr_inicjuj -> string identifier assign . text
    (31) instr_inicjuj -> string identifier assign . null

    text            shift and go to state 119
    null            shift and go to state 120


state 86

    (34) instr_wywolaj -> call identifier l_parenthesis . wyrazenies r_parenthesis
    (35) wyrazenies -> .
    (36) wyrazenies -> . wyrazenie
    (37) wyrazenies -> . wyrazenie wyrazenies
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    r_parenthesis   reduce using rule 35 (wyrazenies -> .)
    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenies                     shift and go to state 121
    wyrazenie                      shift and go to state 122
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 87

    (38) instr_if -> if warunek then . instrukcja instrukcjas
    (39) instr_if -> if warunek then . instrukcja instrukcjas else instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcja                     shift and go to state 123
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 88

    (80) warunek -> warunek_prosty warunek_prostys .

    then            reduce using rule 80 (warunek -> warunek_prosty warunek_prostys .)
    do              reduce using rule 80 (warunek -> warunek_prosty warunek_prostys .)


state 89

    (84) warunek_prostys -> oper_war . warunek_prosty
    (85) warunek_prostys -> oper_war . warunek_prosty warunek_prostys
    (82) warunek_prosty -> . wyrazenie oper_porownania wyrazenie
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    warunek_prosty                 shift and go to state 124
    wyrazenie                      shift and go to state 61
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 90

    (86) oper_war -> and .

    true            reduce using rule 86 (oper_war -> and .)
    false           reduce using rule 86 (oper_war -> and .)
    identifier      reduce using rule 86 (oper_war -> and .)
    number_unsigned reduce using rule 86 (oper_war -> and .)
    minus           reduce using rule 86 (oper_war -> and .)
    call            reduce using rule 86 (oper_war -> and .)
    l_parenthesis   reduce using rule 86 (oper_war -> and .)


state 91

    (87) oper_war -> or .

    true            reduce using rule 87 (oper_war -> or .)
    false           reduce using rule 87 (oper_war -> or .)
    identifier      reduce using rule 87 (oper_war -> or .)
    number_unsigned reduce using rule 87 (oper_war -> or .)
    minus           reduce using rule 87 (oper_war -> or .)
    call            reduce using rule 87 (oper_war -> or .)
    l_parenthesis   reduce using rule 87 (oper_war -> or .)


state 92

    (81) warunek -> not warunek_prosty . warunek_prostys
    (83) warunek_prostys -> .
    (84) warunek_prostys -> . oper_war warunek_prosty
    (85) warunek_prostys -> . oper_war warunek_prosty warunek_prostys
    (86) oper_war -> . and
    (87) oper_war -> . or

    then            reduce using rule 83 (warunek_prostys -> .)
    do              reduce using rule 83 (warunek_prostys -> .)
    and             shift and go to state 90
    or              shift and go to state 91

    warunek_prostys                shift and go to state 125
    oper_war                       shift and go to state 89

state 93

    (82) warunek_prosty -> wyrazenie oper_porownania . wyrazenie
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 126
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 94

    (88) oper_porownania -> equals .

    true            reduce using rule 88 (oper_porownania -> equals .)
    false           reduce using rule 88 (oper_porownania -> equals .)
    identifier      reduce using rule 88 (oper_porownania -> equals .)
    number_unsigned reduce using rule 88 (oper_porownania -> equals .)
    minus           reduce using rule 88 (oper_porownania -> equals .)
    call            reduce using rule 88 (oper_porownania -> equals .)
    l_parenthesis   reduce using rule 88 (oper_porownania -> equals .)


state 95

    (89) oper_porownania -> not_equals .

    true            reduce using rule 89 (oper_porownania -> not_equals .)
    false           reduce using rule 89 (oper_porownania -> not_equals .)
    identifier      reduce using rule 89 (oper_porownania -> not_equals .)
    number_unsigned reduce using rule 89 (oper_porownania -> not_equals .)
    minus           reduce using rule 89 (oper_porownania -> not_equals .)
    call            reduce using rule 89 (oper_porownania -> not_equals .)
    l_parenthesis   reduce using rule 89 (oper_porownania -> not_equals .)


state 96

    (90) oper_porownania -> greater .

    true            reduce using rule 90 (oper_porownania -> greater .)
    false           reduce using rule 90 (oper_porownania -> greater .)
    identifier      reduce using rule 90 (oper_porownania -> greater .)
    number_unsigned reduce using rule 90 (oper_porownania -> greater .)
    minus           reduce using rule 90 (oper_porownania -> greater .)
    call            reduce using rule 90 (oper_porownania -> greater .)
    l_parenthesis   reduce using rule 90 (oper_porownania -> greater .)


state 97

    (91) oper_porownania -> lower .

    true            reduce using rule 91 (oper_porownania -> lower .)
    false           reduce using rule 91 (oper_porownania -> lower .)
    identifier      reduce using rule 91 (oper_porownania -> lower .)
    number_unsigned reduce using rule 91 (oper_porownania -> lower .)
    minus           reduce using rule 91 (oper_porownania -> lower .)
    call            reduce using rule 91 (oper_porownania -> lower .)
    l_parenthesis   reduce using rule 91 (oper_porownania -> lower .)


state 98

    (92) oper_porownania -> greater_or_equal .

    true            reduce using rule 92 (oper_porownania -> greater_or_equal .)
    false           reduce using rule 92 (oper_porownania -> greater_or_equal .)
    identifier      reduce using rule 92 (oper_porownania -> greater_or_equal .)
    number_unsigned reduce using rule 92 (oper_porownania -> greater_or_equal .)
    minus           reduce using rule 92 (oper_porownania -> greater_or_equal .)
    call            reduce using rule 92 (oper_porownania -> greater_or_equal .)
    l_parenthesis   reduce using rule 92 (oper_porownania -> greater_or_equal .)


state 99

    (93) oper_porownania -> lower_or_equal .

    true            reduce using rule 93 (oper_porownania -> lower_or_equal .)
    false           reduce using rule 93 (oper_porownania -> lower_or_equal .)
    identifier      reduce using rule 93 (oper_porownania -> lower_or_equal .)
    number_unsigned reduce using rule 93 (oper_porownania -> lower_or_equal .)
    minus           reduce using rule 93 (oper_porownania -> lower_or_equal .)
    call            reduce using rule 93 (oper_porownania -> lower_or_equal .)
    l_parenthesis   reduce using rule 93 (oper_porownania -> lower_or_equal .)


state 100

    (94) not_equals -> not . equals

    equals          shift and go to state 127


state 101

    (59) wyrazenie -> skladnik skladniks .

    equals          reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    greater         reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    lower           reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    greater_or_equal reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    lower_or_equal  reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    not             reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    end             reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    do              reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    r_parenthesis   reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    identifier      reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    true            reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    false           reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    number_unsigned reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    minus           reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    call            reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    l_parenthesis   reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    and             reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    or              reduce using rule 59 (wyrazenie -> skladnik skladniks .)
    then            reduce using rule 59 (wyrazenie -> skladnik skladniks .)


state 102

    (64) skladniks -> oper_add . skladnik
    (65) skladniks -> oper_add . skladnik skladniks
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    skladnik                       shift and go to state 128
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 103

    (66) oper_add -> plus .

    identifier      reduce using rule 66 (oper_add -> plus .)
    number_unsigned reduce using rule 66 (oper_add -> plus .)
    minus           reduce using rule 66 (oper_add -> plus .)
    call            reduce using rule 66 (oper_add -> plus .)
    l_parenthesis   reduce using rule 66 (oper_add -> plus .)


state 104

    (67) oper_add -> minus .

    identifier      reduce using rule 67 (oper_add -> minus .)
    number_unsigned reduce using rule 67 (oper_add -> minus .)
    minus           reduce using rule 67 (oper_add -> minus .)
    call            reduce using rule 67 (oper_add -> minus .)
    l_parenthesis   reduce using rule 67 (oper_add -> minus .)


state 105

    (62) skladnik -> czynnik czynniks .

    plus            reduce using rule 62 (skladnik -> czynnik czynniks .)
    minus           reduce using rule 62 (skladnik -> czynnik czynniks .)
    equals          reduce using rule 62 (skladnik -> czynnik czynniks .)
    greater         reduce using rule 62 (skladnik -> czynnik czynniks .)
    lower           reduce using rule 62 (skladnik -> czynnik czynniks .)
    greater_or_equal reduce using rule 62 (skladnik -> czynnik czynniks .)
    lower_or_equal  reduce using rule 62 (skladnik -> czynnik czynniks .)
    not             reduce using rule 62 (skladnik -> czynnik czynniks .)
    end             reduce using rule 62 (skladnik -> czynnik czynniks .)
    do              reduce using rule 62 (skladnik -> czynnik czynniks .)
    r_parenthesis   reduce using rule 62 (skladnik -> czynnik czynniks .)
    identifier      reduce using rule 62 (skladnik -> czynnik czynniks .)
    true            reduce using rule 62 (skladnik -> czynnik czynniks .)
    false           reduce using rule 62 (skladnik -> czynnik czynniks .)
    number_unsigned reduce using rule 62 (skladnik -> czynnik czynniks .)
    call            reduce using rule 62 (skladnik -> czynnik czynniks .)
    l_parenthesis   reduce using rule 62 (skladnik -> czynnik czynniks .)
    and             reduce using rule 62 (skladnik -> czynnik czynniks .)
    or              reduce using rule 62 (skladnik -> czynnik czynniks .)
    then            reduce using rule 62 (skladnik -> czynnik czynniks .)


state 106

    (75) czynniks -> oper_mul . czynnik
    (76) czynniks -> oper_mul . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    czynnik                        shift and go to state 129
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 107

    (68) oper_mul -> times .

    identifier      reduce using rule 68 (oper_mul -> times .)
    number_unsigned reduce using rule 68 (oper_mul -> times .)
    minus           reduce using rule 68 (oper_mul -> times .)
    call            reduce using rule 68 (oper_mul -> times .)
    l_parenthesis   reduce using rule 68 (oper_mul -> times .)


state 108

    (69) oper_mul -> divide .

    identifier      reduce using rule 69 (oper_mul -> divide .)
    number_unsigned reduce using rule 69 (oper_mul -> divide .)
    minus           reduce using rule 69 (oper_mul -> divide .)
    call            reduce using rule 69 (oper_mul -> divide .)
    l_parenthesis   reduce using rule 69 (oper_mul -> divide .)


state 109

    (78) liczba -> minus number_unsigned .

    times           reduce using rule 78 (liczba -> minus number_unsigned .)
    divide          reduce using rule 78 (liczba -> minus number_unsigned .)
    plus            reduce using rule 78 (liczba -> minus number_unsigned .)
    minus           reduce using rule 78 (liczba -> minus number_unsigned .)
    equals          reduce using rule 78 (liczba -> minus number_unsigned .)
    greater         reduce using rule 78 (liczba -> minus number_unsigned .)
    lower           reduce using rule 78 (liczba -> minus number_unsigned .)
    greater_or_equal reduce using rule 78 (liczba -> minus number_unsigned .)
    lower_or_equal  reduce using rule 78 (liczba -> minus number_unsigned .)
    not             reduce using rule 78 (liczba -> minus number_unsigned .)
    end             reduce using rule 78 (liczba -> minus number_unsigned .)
    do              reduce using rule 78 (liczba -> minus number_unsigned .)
    r_parenthesis   reduce using rule 78 (liczba -> minus number_unsigned .)
    identifier      reduce using rule 78 (liczba -> minus number_unsigned .)
    true            reduce using rule 78 (liczba -> minus number_unsigned .)
    false           reduce using rule 78 (liczba -> minus number_unsigned .)
    number_unsigned reduce using rule 78 (liczba -> minus number_unsigned .)
    call            reduce using rule 78 (liczba -> minus number_unsigned .)
    l_parenthesis   reduce using rule 78 (liczba -> minus number_unsigned .)
    and             reduce using rule 78 (liczba -> minus number_unsigned .)
    or              reduce using rule 78 (liczba -> minus number_unsigned .)
    then            reduce using rule 78 (liczba -> minus number_unsigned .)


state 110

    (79) wyr_w_naw -> l_parenthesis wyrazenie . r_parenthesis

    r_parenthesis   shift and go to state 130


state 111

    (40) instr_while -> while warunek do . instrukcjas
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    end             reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcjas                    shift and go to state 131
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 112

    (41) instr_for -> for for_warunek do . instrukcjas
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    end             reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcjas                    shift and go to state 132
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 113

    (95) for_warunek -> instr_inicjuj wyrazenie . instr_podstaw
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null

    identifier      shift and go to state 23

    instr_podstaw                  shift and go to state 133

state 114

    (44) instr_switch -> switch l_parenthesis wyrazenie . r_parenthesis case_blok case_bloks case_default

    r_parenthesis   shift and go to state 134


state 115

    (11) dek_fun -> function var_sym identifier l_parenthesis . arguments r_parenthesis instrukcjas return wyrazenie end
    (13) arguments -> .
    (14) arguments -> . var_sym identifier
    (15) arguments -> . var_sym identifier arguments
    (51) var_sym -> . var_liczba_sym
    (52) var_sym -> . string
    (53) var_sym -> . boolean
    (54) var_sym -> . char
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    r_parenthesis   reduce using rule 13 (arguments -> .)
    string          shift and go to state 39
    boolean         shift and go to state 40
    char            shift and go to state 41
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    var_sym                        shift and go to state 135
    arguments                      shift and go to state 136
    var_liczba_sym                 shift and go to state 38

state 116

    (12) dek_fun -> function void identifier l_parenthesis . arguments r_parenthesis instrukcjas return wyrazenie end
    (13) arguments -> .
    (14) arguments -> . var_sym identifier
    (15) arguments -> . var_sym identifier arguments
    (51) var_sym -> . var_liczba_sym
    (52) var_sym -> . string
    (53) var_sym -> . boolean
    (54) var_sym -> . char
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    r_parenthesis   reduce using rule 13 (arguments -> .)
    string          shift and go to state 39
    boolean         shift and go to state 40
    char            shift and go to state 41
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    arguments                      shift and go to state 137
    var_sym                        shift and go to state 135
    var_liczba_sym                 shift and go to state 38

state 117

    (28) instr_inicjuj -> var_liczba_sym identifier assign liczba .

    end             reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)
    true            reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)
    false           reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)
    identifier      reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)
    number_unsigned reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)
    minus           reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)
    call            reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)
    l_parenthesis   reduce using rule 28 (instr_inicjuj -> var_liczba_sym identifier assign liczba .)


state 118

    (29) instr_inicjuj -> var_liczba_sym identifier assign null .

    end             reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)
    true            reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)
    false           reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)
    identifier      reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)
    number_unsigned reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)
    minus           reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)
    call            reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)
    l_parenthesis   reduce using rule 29 (instr_inicjuj -> var_liczba_sym identifier assign null .)


state 119

    (30) instr_inicjuj -> string identifier assign text .

    end             reduce using rule 30 (instr_inicjuj -> string identifier assign text .)
    true            reduce using rule 30 (instr_inicjuj -> string identifier assign text .)
    false           reduce using rule 30 (instr_inicjuj -> string identifier assign text .)
    identifier      reduce using rule 30 (instr_inicjuj -> string identifier assign text .)
    number_unsigned reduce using rule 30 (instr_inicjuj -> string identifier assign text .)
    minus           reduce using rule 30 (instr_inicjuj -> string identifier assign text .)
    call            reduce using rule 30 (instr_inicjuj -> string identifier assign text .)
    l_parenthesis   reduce using rule 30 (instr_inicjuj -> string identifier assign text .)


state 120

    (31) instr_inicjuj -> string identifier assign null .

    end             reduce using rule 31 (instr_inicjuj -> string identifier assign null .)
    true            reduce using rule 31 (instr_inicjuj -> string identifier assign null .)
    false           reduce using rule 31 (instr_inicjuj -> string identifier assign null .)
    identifier      reduce using rule 31 (instr_inicjuj -> string identifier assign null .)
    number_unsigned reduce using rule 31 (instr_inicjuj -> string identifier assign null .)
    minus           reduce using rule 31 (instr_inicjuj -> string identifier assign null .)
    call            reduce using rule 31 (instr_inicjuj -> string identifier assign null .)
    l_parenthesis   reduce using rule 31 (instr_inicjuj -> string identifier assign null .)


state 121

    (34) instr_wywolaj -> call identifier l_parenthesis wyrazenies . r_parenthesis

    r_parenthesis   shift and go to state 138


state 122

    (36) wyrazenies -> wyrazenie .
    (37) wyrazenies -> wyrazenie . wyrazenies
    (35) wyrazenies -> .
    (36) wyrazenies -> . wyrazenie
    (37) wyrazenies -> . wyrazenie wyrazenies
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

  ! reduce/reduce conflict for r_parenthesis resolved using rule 35 (wyrazenies -> .)
    r_parenthesis   reduce using rule 35 (wyrazenies -> .)
    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

  ! r_parenthesis   [ reduce using rule 36 (wyrazenies -> wyrazenie .) ]

    wyrazenie                      shift and go to state 122
    wyrazenies                     shift and go to state 139
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 123

    (38) instr_if -> if warunek then instrukcja . instrukcjas
    (39) instr_if -> if warunek then instrukcja . instrukcjas else instrukcja instrukcjas
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    else            reduce using rule 17 (instrukcjas -> .)
    end             reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcja                     shift and go to state 13
    instrukcjas                    shift and go to state 140
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 124

    (84) warunek_prostys -> oper_war warunek_prosty .
    (85) warunek_prostys -> oper_war warunek_prosty . warunek_prostys
    (83) warunek_prostys -> .
    (84) warunek_prostys -> . oper_war warunek_prosty
    (85) warunek_prostys -> . oper_war warunek_prosty warunek_prostys
    (86) oper_war -> . and
    (87) oper_war -> . or

  ! reduce/reduce conflict for then resolved using rule 83 (warunek_prostys -> .)
  ! reduce/reduce conflict for do resolved using rule 83 (warunek_prostys -> .)
    then            reduce using rule 83 (warunek_prostys -> .)
    do              reduce using rule 83 (warunek_prostys -> .)
    and             shift and go to state 90
    or              shift and go to state 91

  ! then            [ reduce using rule 84 (warunek_prostys -> oper_war warunek_prosty .) ]
  ! do              [ reduce using rule 84 (warunek_prostys -> oper_war warunek_prosty .) ]

    oper_war                       shift and go to state 89
    warunek_prostys                shift and go to state 141

state 125

    (81) warunek -> not warunek_prosty warunek_prostys .

    then            reduce using rule 81 (warunek -> not warunek_prosty warunek_prostys .)
    do              reduce using rule 81 (warunek -> not warunek_prosty warunek_prostys .)


state 126

    (82) warunek_prosty -> wyrazenie oper_porownania wyrazenie .

    and             reduce using rule 82 (warunek_prosty -> wyrazenie oper_porownania wyrazenie .)
    or              reduce using rule 82 (warunek_prosty -> wyrazenie oper_porownania wyrazenie .)
    then            reduce using rule 82 (warunek_prosty -> wyrazenie oper_porownania wyrazenie .)
    do              reduce using rule 82 (warunek_prosty -> wyrazenie oper_porownania wyrazenie .)


state 127

    (94) not_equals -> not equals .

    true            reduce using rule 94 (not_equals -> not equals .)
    false           reduce using rule 94 (not_equals -> not equals .)
    identifier      reduce using rule 94 (not_equals -> not equals .)
    number_unsigned reduce using rule 94 (not_equals -> not equals .)
    minus           reduce using rule 94 (not_equals -> not equals .)
    call            reduce using rule 94 (not_equals -> not equals .)
    l_parenthesis   reduce using rule 94 (not_equals -> not equals .)


state 128

    (64) skladniks -> oper_add skladnik .
    (65) skladniks -> oper_add skladnik . skladniks
    (63) skladniks -> .
    (64) skladniks -> . oper_add skladnik
    (65) skladniks -> . oper_add skladnik skladniks
    (66) oper_add -> . plus
    (67) oper_add -> . minus

  ! reduce/reduce conflict for equals resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for greater resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for lower resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for greater_or_equal resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for lower_or_equal resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for not resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for end resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for do resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for r_parenthesis resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for identifier resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for true resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for false resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for number_unsigned resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for minus resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for call resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for l_parenthesis resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for and resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for or resolved using rule 63 (skladniks -> .)
  ! reduce/reduce conflict for then resolved using rule 63 (skladniks -> .)
  ! shift/reduce conflict for minus resolved as shift
    equals          reduce using rule 63 (skladniks -> .)
    greater         reduce using rule 63 (skladniks -> .)
    lower           reduce using rule 63 (skladniks -> .)
    greater_or_equal reduce using rule 63 (skladniks -> .)
    lower_or_equal  reduce using rule 63 (skladniks -> .)
    not             reduce using rule 63 (skladniks -> .)
    end             reduce using rule 63 (skladniks -> .)
    do              reduce using rule 63 (skladniks -> .)
    r_parenthesis   reduce using rule 63 (skladniks -> .)
    identifier      reduce using rule 63 (skladniks -> .)
    true            reduce using rule 63 (skladniks -> .)
    false           reduce using rule 63 (skladniks -> .)
    number_unsigned reduce using rule 63 (skladniks -> .)
    call            reduce using rule 63 (skladniks -> .)
    l_parenthesis   reduce using rule 63 (skladniks -> .)
    and             reduce using rule 63 (skladniks -> .)
    or              reduce using rule 63 (skladniks -> .)
    then            reduce using rule 63 (skladniks -> .)
    plus            shift and go to state 103
    minus           shift and go to state 104

  ! equals          [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! greater         [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! lower           [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! greater_or_equal [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! lower_or_equal  [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! not             [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! end             [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! do              [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! r_parenthesis   [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! identifier      [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! true            [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! false           [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! number_unsigned [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! minus           [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! call            [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! l_parenthesis   [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! and             [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! or              [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! then            [ reduce using rule 64 (skladniks -> oper_add skladnik .) ]
  ! minus           [ reduce using rule 63 (skladniks -> .) ]

    oper_add                       shift and go to state 102
    skladniks                      shift and go to state 142

state 129

    (75) czynniks -> oper_mul czynnik .
    (76) czynniks -> oper_mul czynnik . czynniks
    (74) czynniks -> .
    (75) czynniks -> . oper_mul czynnik
    (76) czynniks -> . oper_mul czynnik czynniks
    (68) oper_mul -> . times
    (69) oper_mul -> . divide

  ! reduce/reduce conflict for plus resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for minus resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for equals resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for greater resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for lower resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for greater_or_equal resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for lower_or_equal resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for not resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for end resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for do resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for r_parenthesis resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for identifier resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for true resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for false resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for number_unsigned resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for call resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for l_parenthesis resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for and resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for or resolved using rule 74 (czynniks -> .)
  ! reduce/reduce conflict for then resolved using rule 74 (czynniks -> .)
    plus            reduce using rule 74 (czynniks -> .)
    minus           reduce using rule 74 (czynniks -> .)
    equals          reduce using rule 74 (czynniks -> .)
    greater         reduce using rule 74 (czynniks -> .)
    lower           reduce using rule 74 (czynniks -> .)
    greater_or_equal reduce using rule 74 (czynniks -> .)
    lower_or_equal  reduce using rule 74 (czynniks -> .)
    not             reduce using rule 74 (czynniks -> .)
    end             reduce using rule 74 (czynniks -> .)
    do              reduce using rule 74 (czynniks -> .)
    r_parenthesis   reduce using rule 74 (czynniks -> .)
    identifier      reduce using rule 74 (czynniks -> .)
    true            reduce using rule 74 (czynniks -> .)
    false           reduce using rule 74 (czynniks -> .)
    number_unsigned reduce using rule 74 (czynniks -> .)
    call            reduce using rule 74 (czynniks -> .)
    l_parenthesis   reduce using rule 74 (czynniks -> .)
    and             reduce using rule 74 (czynniks -> .)
    or              reduce using rule 74 (czynniks -> .)
    then            reduce using rule 74 (czynniks -> .)
    times           shift and go to state 107
    divide          shift and go to state 108

  ! plus            [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! minus           [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! equals          [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! greater         [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! lower           [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! greater_or_equal [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! lower_or_equal  [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! not             [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! end             [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! do              [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! r_parenthesis   [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! identifier      [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! true            [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! false           [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! number_unsigned [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! call            [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! l_parenthesis   [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! and             [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! or              [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]
  ! then            [ reduce using rule 75 (czynniks -> oper_mul czynnik .) ]

    oper_mul                       shift and go to state 106
    czynniks                       shift and go to state 143

state 130

    (79) wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .

    times           reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    divide          reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    plus            reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    minus           reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    equals          reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    greater         reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    lower           reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    greater_or_equal reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    lower_or_equal  reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    not             reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    end             reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    do              reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    r_parenthesis   reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    identifier      reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    true            reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    false           reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    number_unsigned reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    call            reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    l_parenthesis   reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    and             reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    or              reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)
    then            reduce using rule 79 (wyr_w_naw -> l_parenthesis wyrazenie r_parenthesis .)


state 131

    (40) instr_while -> while warunek do instrukcjas .

    end             reduce using rule 40 (instr_while -> while warunek do instrukcjas .)


state 132

    (41) instr_for -> for for_warunek do instrukcjas .

    end             reduce using rule 41 (instr_for -> for for_warunek do instrukcjas .)


state 133

    (95) for_warunek -> instr_inicjuj wyrazenie instr_podstaw .

    do              reduce using rule 95 (for_warunek -> instr_inicjuj wyrazenie instr_podstaw .)


state 134

    (44) instr_switch -> switch l_parenthesis wyrazenie r_parenthesis . case_blok case_bloks case_default
    (45) case_blok -> . case l_parenthesis wyrazenie r_parenthesis then instrukcjas end
    (46) case_blok -> . case l_parenthesis wyrazenie r_parenthesis then instrukcjas break end

    case            shift and go to state 145

    case_blok                      shift and go to state 144

state 135

    (14) arguments -> var_sym . identifier
    (15) arguments -> var_sym . identifier arguments

    identifier      shift and go to state 146


state 136

    (11) dek_fun -> function var_sym identifier l_parenthesis arguments . r_parenthesis instrukcjas return wyrazenie end

    r_parenthesis   shift and go to state 147


state 137

    (12) dek_fun -> function void identifier l_parenthesis arguments . r_parenthesis instrukcjas return wyrazenie end

    r_parenthesis   shift and go to state 148


state 138

    (34) instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .

    end             reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    times           reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    divide          reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    plus            reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    minus           reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    equals          reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    greater         reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    lower           reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    greater_or_equal reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    lower_or_equal  reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    not             reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    do              reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    r_parenthesis   reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    identifier      reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    true            reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    false           reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    number_unsigned reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    call            reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    l_parenthesis   reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    and             reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    or              reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)
    then            reduce using rule 34 (instr_wywolaj -> call identifier l_parenthesis wyrazenies r_parenthesis .)


state 139

    (37) wyrazenies -> wyrazenie wyrazenies .

    r_parenthesis   reduce using rule 37 (wyrazenies -> wyrazenie wyrazenies .)


state 140

    (38) instr_if -> if warunek then instrukcja instrukcjas .
    (39) instr_if -> if warunek then instrukcja instrukcjas . else instrukcja instrukcjas

    end             reduce using rule 38 (instr_if -> if warunek then instrukcja instrukcjas .)
    else            shift and go to state 149


state 141

    (85) warunek_prostys -> oper_war warunek_prosty warunek_prostys .

    then            reduce using rule 85 (warunek_prostys -> oper_war warunek_prosty warunek_prostys .)
    do              reduce using rule 85 (warunek_prostys -> oper_war warunek_prosty warunek_prostys .)


state 142

    (65) skladniks -> oper_add skladnik skladniks .

    equals          reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    greater         reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    lower           reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    greater_or_equal reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    lower_or_equal  reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    not             reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    end             reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    do              reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    r_parenthesis   reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    identifier      reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    true            reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    false           reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    number_unsigned reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    minus           reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    call            reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    l_parenthesis   reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    and             reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    or              reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)
    then            reduce using rule 65 (skladniks -> oper_add skladnik skladniks .)


state 143

    (76) czynniks -> oper_mul czynnik czynniks .

    plus            reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    minus           reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    equals          reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    greater         reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    lower           reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    greater_or_equal reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    lower_or_equal  reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    not             reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    end             reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    do              reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    r_parenthesis   reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    identifier      reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    true            reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    false           reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    number_unsigned reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    call            reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    l_parenthesis   reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    and             reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    or              reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)
    then            reduce using rule 76 (czynniks -> oper_mul czynnik czynniks .)


state 144

    (44) instr_switch -> switch l_parenthesis wyrazenie r_parenthesis case_blok . case_bloks case_default
    (48) case_bloks -> .
    (49) case_bloks -> . case_blok
    (50) case_bloks -> . case_blok case_bloks
    (45) case_blok -> . case l_parenthesis wyrazenie r_parenthesis then instrukcjas end
    (46) case_blok -> . case l_parenthesis wyrazenie r_parenthesis then instrukcjas break end

    default         reduce using rule 48 (case_bloks -> .)
    case            shift and go to state 145

    case_blok                      shift and go to state 150
    case_bloks                     shift and go to state 151

state 145

    (45) case_blok -> case . l_parenthesis wyrazenie r_parenthesis then instrukcjas end
    (46) case_blok -> case . l_parenthesis wyrazenie r_parenthesis then instrukcjas break end

    l_parenthesis   shift and go to state 152


state 146

    (14) arguments -> var_sym identifier .
    (15) arguments -> var_sym identifier . arguments
    (13) arguments -> .
    (14) arguments -> . var_sym identifier
    (15) arguments -> . var_sym identifier arguments
    (51) var_sym -> . var_liczba_sym
    (52) var_sym -> . string
    (53) var_sym -> . boolean
    (54) var_sym -> . char
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

  ! reduce/reduce conflict for r_parenthesis resolved using rule 13 (arguments -> .)
    r_parenthesis   reduce using rule 13 (arguments -> .)
    string          shift and go to state 39
    boolean         shift and go to state 40
    char            shift and go to state 41
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

  ! r_parenthesis   [ reduce using rule 14 (arguments -> var_sym identifier .) ]

    var_sym                        shift and go to state 135
    arguments                      shift and go to state 153
    var_liczba_sym                 shift and go to state 38

state 147

    (11) dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis . instrukcjas return wyrazenie end
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    return          reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcjas                    shift and go to state 154
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 148

    (12) dek_fun -> function void identifier l_parenthesis arguments r_parenthesis . instrukcjas return wyrazenie end
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    return          reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcjas                    shift and go to state 155
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 149

    (39) instr_if -> if warunek then instrukcja instrukcjas else . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcja                     shift and go to state 156
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 150

    (49) case_bloks -> case_blok .
    (50) case_bloks -> case_blok . case_bloks
    (48) case_bloks -> .
    (49) case_bloks -> . case_blok
    (50) case_bloks -> . case_blok case_bloks
    (45) case_blok -> . case l_parenthesis wyrazenie r_parenthesis then instrukcjas end
    (46) case_blok -> . case l_parenthesis wyrazenie r_parenthesis then instrukcjas break end

  ! reduce/reduce conflict for default resolved using rule 48 (case_bloks -> .)
    default         reduce using rule 48 (case_bloks -> .)
    case            shift and go to state 145

  ! default         [ reduce using rule 49 (case_bloks -> case_blok .) ]

    case_blok                      shift and go to state 150
    case_bloks                     shift and go to state 157

state 151

    (44) instr_switch -> switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks . case_default
    (47) case_default -> . default then instrukcjas end

    default         shift and go to state 159

    case_default                   shift and go to state 158

state 152

    (45) case_blok -> case l_parenthesis . wyrazenie r_parenthesis then instrukcjas end
    (46) case_blok -> case l_parenthesis . wyrazenie r_parenthesis then instrukcjas break end
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 160
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 153

    (15) arguments -> var_sym identifier arguments .

    r_parenthesis   reduce using rule 15 (arguments -> var_sym identifier arguments .)


state 154

    (11) dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas . return wyrazenie end

    return          shift and go to state 161


state 155

    (12) dek_fun -> function void identifier l_parenthesis arguments r_parenthesis instrukcjas . return wyrazenie end

    return          shift and go to state 162


state 156

    (39) instr_if -> if warunek then instrukcja instrukcjas else instrukcja . instrukcjas
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    end             reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcja                     shift and go to state 13
    instrukcjas                    shift and go to state 163
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 157

    (50) case_bloks -> case_blok case_bloks .

    default         reduce using rule 50 (case_bloks -> case_blok case_bloks .)


state 158

    (44) instr_switch -> switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default .

    end             reduce using rule 44 (instr_switch -> switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default .)


state 159

    (47) case_default -> default . then instrukcjas end

    then            shift and go to state 164


state 160

    (45) case_blok -> case l_parenthesis wyrazenie . r_parenthesis then instrukcjas end
    (46) case_blok -> case l_parenthesis wyrazenie . r_parenthesis then instrukcjas break end

    r_parenthesis   shift and go to state 165


state 161

    (11) dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return . wyrazenie end
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 166
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 162

    (12) dek_fun -> function void identifier l_parenthesis arguments r_parenthesis instrukcjas return . wyrazenie end
    (59) wyrazenie -> . skladnik skladniks
    (60) wyrazenie -> . true
    (61) wyrazenie -> . false
    (62) skladnik -> . czynnik czynniks
    (70) czynnik -> . identifier
    (71) czynnik -> . liczba
    (72) czynnik -> . instr_wywolaj
    (73) czynnik -> . wyr_w_naw
    (77) liczba -> . number_unsigned
    (78) liczba -> . minus number_unsigned
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (79) wyr_w_naw -> . l_parenthesis wyrazenie r_parenthesis

    true            shift and go to state 63
    false           shift and go to state 64
    identifier      shift and go to state 66
    number_unsigned shift and go to state 70
    minus           shift and go to state 71
    call            shift and go to state 25
    l_parenthesis   shift and go to state 72

    wyrazenie                      shift and go to state 167
    skladnik                       shift and go to state 62
    czynnik                        shift and go to state 65
    liczba                         shift and go to state 67
    instr_wywolaj                  shift and go to state 68
    wyr_w_naw                      shift and go to state 69

state 163

    (39) instr_if -> if warunek then instrukcja instrukcjas else instrukcja instrukcjas .

    end             reduce using rule 39 (instr_if -> if warunek then instrukcja instrukcjas else instrukcja instrukcjas .)


state 164

    (47) case_default -> default then . instrukcjas end
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    end             reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcjas                    shift and go to state 168
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 165

    (45) case_blok -> case l_parenthesis wyrazenie r_parenthesis . then instrukcjas end
    (46) case_blok -> case l_parenthesis wyrazenie r_parenthesis . then instrukcjas break end

    then            shift and go to state 169


state 166

    (11) dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie . end

    end             shift and go to state 170


state 167

    (12) dek_fun -> function void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie . end

    end             shift and go to state 171


state 168

    (47) case_default -> default then instrukcjas . end

    end             shift and go to state 172


state 169

    (45) case_blok -> case l_parenthesis wyrazenie r_parenthesis then . instrukcjas end
    (46) case_blok -> case l_parenthesis wyrazenie r_parenthesis then . instrukcjas break end
    (17) instrukcjas -> .
    (18) instrukcjas -> . instrukcja
    (19) instrukcjas -> . instrukcja instrukcjas
    (20) instrukcja -> . instr_inicjuj end
    (21) instrukcja -> . instr_podstaw end
    (22) instrukcja -> . instr_wywolaj end
    (23) instrukcja -> . instr_if end
    (24) instrukcja -> . instr_while end
    (25) instrukcja -> . instr_for end
    (26) instrukcja -> . wypisz end
    (27) instrukcja -> . instr_switch end
    (28) instr_inicjuj -> . var_liczba_sym identifier assign liczba
    (29) instr_inicjuj -> . var_liczba_sym identifier assign null
    (30) instr_inicjuj -> . string identifier assign text
    (31) instr_inicjuj -> . string identifier assign null
    (32) instr_podstaw -> . identifier assign wyrazenie
    (33) instr_podstaw -> . identifier assign null
    (34) instr_wywolaj -> . call identifier l_parenthesis wyrazenies r_parenthesis
    (38) instr_if -> . if warunek then instrukcja instrukcjas
    (39) instr_if -> . if warunek then instrukcja instrukcjas else instrukcja instrukcjas
    (40) instr_while -> . while warunek do instrukcjas
    (41) instr_for -> . for for_warunek do instrukcjas
    (42) wypisz -> . print wyrazenie
    (43) wypisz -> . print text
    (44) instr_switch -> . switch l_parenthesis wyrazenie r_parenthesis case_blok case_bloks case_default
    (55) var_liczba_sym -> . int
    (56) var_liczba_sym -> . long
    (57) var_liczba_sym -> . float
    (58) var_liczba_sym -> . double

    end             reduce using rule 17 (instrukcjas -> .)
    break           reduce using rule 17 (instrukcjas -> .)
    string          shift and go to state 24
    identifier      shift and go to state 23
    call            shift and go to state 25
    if              shift and go to state 26
    while           shift and go to state 27
    for             shift and go to state 28
    print           shift and go to state 29
    switch          shift and go to state 30
    int             shift and go to state 31
    long            shift and go to state 32
    float           shift and go to state 33
    double          shift and go to state 34

    instrukcjas                    shift and go to state 173
    instrukcja                     shift and go to state 13
    instr_inicjuj                  shift and go to state 14
    instr_podstaw                  shift and go to state 15
    instr_wywolaj                  shift and go to state 16
    instr_if                       shift and go to state 17
    instr_while                    shift and go to state 18
    instr_for                      shift and go to state 19
    wypisz                         shift and go to state 20
    instr_switch                   shift and go to state 21
    var_liczba_sym                 shift and go to state 22

state 170

    (11) dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end .

    function        reduce using rule 11 (dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end .)
    end             reduce using rule 11 (dek_fun -> function var_sym identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end .)


state 171

    (12) dek_fun -> function void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end .

    function        reduce using rule 12 (dek_fun -> function void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end .)
    end             reduce using rule 12 (dek_fun -> function void identifier l_parenthesis arguments r_parenthesis instrukcjas return wyrazenie end .)


state 172

    (47) case_default -> default then instrukcjas end .

    end             reduce using rule 47 (case_default -> default then instrukcjas end .)


state 173

    (45) case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas . end
    (46) case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas . break end

    end             shift and go to state 174
    break           shift and go to state 175


state 174

    (45) case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas end .

    case            reduce using rule 45 (case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas end .)
    default         reduce using rule 45 (case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas end .)


state 175

    (46) case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas break . end

    end             shift and go to state 176


state 176

    (46) case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas break end .

    case            reduce using rule 46 (case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas break end .)
    default         reduce using rule 46 (case_blok -> case l_parenthesis wyrazenie r_parenthesis then instrukcjas break end .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for end in state 0 resolved as shift
WARNING: shift/reduce conflict for end in state 5 resolved as shift
WARNING: shift/reduce conflict for end in state 9 resolved as shift
WARNING: shift/reduce conflict for minus in state 62 resolved as shift
WARNING: shift/reduce conflict for minus in state 128 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (dek_funs -> <empty>)
WARNING: rejected rule (dek_funs -> dek_fun) in state 7
WARNING: reduce/reduce conflict in state 13 resolved using rule (instrukcjas -> <empty>)
WARNING: rejected rule (instrukcjas -> instrukcja) in state 13
WARNING: reduce/reduce conflict in state 122 resolved using rule (wyrazenies -> <empty>)
WARNING: rejected rule (wyrazenies -> wyrazenie) in state 122
WARNING: reduce/reduce conflict in state 124 resolved using rule (warunek_prostys -> <empty>)
WARNING: rejected rule (warunek_prostys -> oper_war warunek_prosty) in state 124
WARNING: reduce/reduce conflict in state 128 resolved using rule (skladniks -> <empty>)
WARNING: rejected rule (skladniks -> oper_add skladnik) in state 128
WARNING: reduce/reduce conflict in state 129 resolved using rule (czynniks -> <empty>)
WARNING: rejected rule (czynniks -> oper_mul czynnik) in state 129
WARNING: reduce/reduce conflict in state 146 resolved using rule (arguments -> <empty>)
WARNING: rejected rule (arguments -> var_sym identifier) in state 146
WARNING: reduce/reduce conflict in state 150 resolved using rule (case_bloks -> <empty>)
WARNING: rejected rule (case_bloks -> case_blok) in state 150
WARNING: Rule (dek_funs -> dek_fun) is never reduced
WARNING: Rule (instrukcjas -> instrukcja) is never reduced
WARNING: Rule (wyrazenies -> wyrazenie) is never reduced
WARNING: Rule (warunek_prostys -> oper_war warunek_prosty) is never reduced
WARNING: Rule (skladniks -> oper_add skladnik) is never reduced
WARNING: Rule (czynniks -> oper_mul czynnik) is never reduced
WARNING: Rule (arguments -> var_sym identifier) is never reduced
WARNING: Rule (case_bloks -> case_blok) is never reduced
